nodes = {
	
	dpsim = {
		type = "shmem",
		in = {
			name = "/dpsim-villas",	# Name of shared memory segment for sending side
			hooks = (
				{ type = "stats" }
			),
			signals = {
				# count = 2,
				# type = "float"
				count = 1,
				type = "complex"
			}
		},
		out = {
			name = "/villas-dpsim"	# Name of shared memory segment for receiving side
			signals = {
				count = 1,
				type = "complex"
			}
		
		},				
		queuelen = 1024,	# Length of the queues
		polling = true,		# We can busy-wait or use pthread condition variables for synchronizations
	},

	nano = {
		type = "nanomsg",
		format = "json",

		out = {
			endpoints = [
				"ipc:///tmp/test1.ipc"
				#"tcp://137.226.123.165:50000"
				#"tcp://*:12000"
			]
			signals = {
				# count = 2,
				# type = "float"
				count = 1,
				type = "complex"
			}
		}
		
		in = {
			endpoints = [
				"ipc:///tmp/test2.ipc"
				#"tcp://137.226.133.157:50000"
			]
			signals = {
				count = 1,
				type = "complex"
			}
		}
	}
}

paths = (
	{
		in = "dpsim",
		out = "nano",
		
		# mode: any/all
		# Condition of which/how many source nodes have to receive
		# at least one sample for the path to be triggered
		mode = "any",
		reverse = true
	}
	# },
	# {
	# 	in = "nano";
	# 	out = "dpsim";
	# 	mode = "any"
	# }

)
